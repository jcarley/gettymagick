// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package lib

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF83036 = 1
	codecSelferC_RAW3036  = 0
	// ----- value types used ----
	codecSelferValueTypeArray3036 = 10
	codecSelferValueTypeMap3036   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey3036    = 2
	codecSelfer_containerMapValue3036  = 3
	codecSelfer_containerMapEnd3036    = 4
	codecSelfer_containerArrayElem3036 = 6
	codecSelfer_containerArrayEnd3036  = 7
)

var (
	codecSelferBitsize3036                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr3036 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer3036 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *Options) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3036
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Compression != 0
			yyq2[1] = x.Destination != ""
			yyq2[2] = x.Height != 0
			yyq2[3] = x.Quality != 0
			yyq2[4] = x.Source != ""
			yyq2[5] = x.Width != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Compression))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("compression"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Compression))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF83036, string(x.Destination))
					}
				} else {
					r.EncodeString(codecSelferC_UTF83036, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("destination"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF83036, string(x.Destination))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeInt(int64(x.Height))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("height"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeInt(int64(x.Height))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeInt(int64(x.Quality))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("quality"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeInt(int64(x.Quality))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF83036, string(x.Source))
					}
				} else {
					r.EncodeString(codecSelferC_UTF83036, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF83036, string(x.Source))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem3036)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeInt(int64(x.Width))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey3036)
					r.EncodeString(codecSelferC_UTF83036, string("width"))
					z.EncSendContainerState(codecSelfer_containerMapValue3036)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeInt(int64(x.Width))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd3036)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd3036)
			}
		}
	}
}

func (x *Options) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3036
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap3036 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd3036)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray3036 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr3036)
		}
	}
}

func (x *Options) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3036
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey3036)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue3036)
		switch yys3 {
		case "compression":
			if r.TryDecodeAsNil() {
				x.Compression = 0
			} else {
				yyv4 := &x.Compression
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize3036))
				}
			}
		case "destination":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				yyv6 := &x.Destination
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "height":
			if r.TryDecodeAsNil() {
				x.Height = 0
			} else {
				yyv8 := &x.Height
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize3036))
				}
			}
		case "quality":
			if r.TryDecodeAsNil() {
				x.Quality = 0
			} else {
				yyv10 := &x.Quality
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize3036))
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				yyv12 := &x.Source
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "width":
			if r.TryDecodeAsNil() {
				x.Width = 0
			} else {
				yyv14 := &x.Width
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize3036))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd3036)
}

func (x *Options) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3036
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Compression = 0
	} else {
		yyv17 := &x.Compression
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize3036))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		yyv19 := &x.Destination
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Height = 0
	} else {
		yyv21 := &x.Height
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize3036))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Quality = 0
	} else {
		yyv23 := &x.Quality
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize3036))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		yyv25 := &x.Source
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem3036)
	if r.TryDecodeAsNil() {
		x.Width = 0
	} else {
		yyv27 := &x.Width
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize3036))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem3036)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd3036)
}
